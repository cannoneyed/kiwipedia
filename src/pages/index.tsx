import Head from 'next/head';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import Link from 'next/link';
import clientPromise from '@/lib/mongodb';

const inter = Inter({ subsets: ['latin'] });

interface Page {
  title: string;
  pageId: string;
}

export interface Props {
  nArticles: number;
  pages: Page[];
}

export default function Home(props: Props) {
  return (
    <>
      <Head>
        <title>Kiwipedia</title>
        <meta
          name="description"
          content="Kiwipedia is a free online encyclopedia, completely synthesize by AI."
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={inter.className}>
        <div className={styles.main}>
          <div className={styles.topBanner}>
            <div className={styles.title}>Welcome to Kiwipedia</div>
            <div className={styles.subtitle}>
              The synthetic encyclopedia completely generated by AI.
            </div>
            <div className={styles.counts}>
              {props.nArticles} articles in English.
            </div>
          </div>
          <div className={styles.articles}>
            <div className={styles.articlesTitle}>Featured articles</div>
            {props.pages.map((page) => {
              const url = `/wiki/${page.pageId}`;
              return (
                <div key={page.pageId}>
                  <Link href={url}>
                    <span className={styles.link}>{page.title}</span>
                  </Link>
                </div>
              );
            })}
          </div>
        </div>
      </main>
    </>
  );
}

export async function getStaticProps() {
  try {
    const client = await clientPromise;
    const db = client.db('kiwipedia');

    const pages = await db
      .collection('wikis')
      .find({})
      .project({ title: 1, pageId: 1, _id: 0 })
      .toArray();

    return {
      props: { pages, nArticles: pages.length },
    };
  } catch (e) {
    console.error(e);
  }
}
